// 计算工具函数
var patchTools = {
  // 计算两点之间的距离
  getDistance: function(x1, y1, x2, y2) {
    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
  },
  
  // 计算两点之间的角度
  getAngle: function(x1, y1, x2, y2) {
    return Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;
  },
  
  // 检查两个矩形是否重叠
  doOverlap: function(rect1, rect2) {
    return (
      rect1.left < rect2.right &&
      rect1.right > rect2.left &&
      rect1.top < rect2.bottom &&
      rect1.bottom > rect2.top
    );
  },
  
  // 检查三个矩形是否有共同重叠区域
  doThreePatchesOverlap: function(rect1, rect2, rect3) {
    // 计算三个矩形的重叠区域
    var left = Math.max(rect1.left, rect2.left, rect3.left);
    var right = Math.min(rect1.right, rect2.right, rect3.right);
    var top = Math.max(rect1.top, rect2.top, rect3.top);
    var bottom = Math.min(rect1.bottom, rect2.bottom, rect3.bottom);
    
    // 如果有有效的重叠区域，返回true
    return left < right && top < bottom;
  },

  // 获取旋转后的贴件边界矩形
  getRotatedPatchBounds: function(patch) {
    if (patch.rotation === 0 || patch.rotation % 360 === 0) {
      // 没有旋转，直接返回原始边界
      return {
        left: patch.left,
        top: patch.top,
        right: patch.left + patch.width,
        bottom: patch.top + patch.height
      };
    }
    
    // 计算旋转后的边界框
    var centerX = patch.left + patch.width / 2;
    var centerY = patch.top + patch.height / 2;
    var angle = patch.rotation * Math.PI / 180; // 转换为弧度
    
    // 四个角的坐标
    var corners = [
      { x: patch.left, y: patch.top },
      { x: patch.left + patch.width, y: patch.top },
      { x: patch.left + patch.width, y: patch.top + patch.height },
      { x: patch.left, y: patch.top + patch.height }
    ];
    
    // 旋转四个角
    var rotatedCorners = [];
    for (var i = 0; i < corners.length; i++) {
      var corner = corners[i];
      // 转换为相对于中心点的坐标
      var relX = corner.x - centerX;
      var relY = corner.y - centerY;
      
      // 旋转
      var rotatedX = relX * Math.cos(angle) - relY * Math.sin(angle);
      var rotatedY = relX * Math.sin(angle) + relY * Math.cos(angle);
      
      // 转换回绝对坐标
      rotatedCorners.push({
        x: rotatedX + centerX,
        y: rotatedY + centerY
      });
    }
    
    // 计算旋转后的边界
    var xs = [];
    var ys = [];
    for (var j = 0; j < rotatedCorners.length; j++) {
      xs.push(rotatedCorners[j].x);
      ys.push(rotatedCorners[j].y);
    }
    
    return {
      left: Math.min.apply(null, xs),
      top: Math.min.apply(null, ys),
      right: Math.max.apply(null, xs),
      bottom: Math.max.apply(null, ys)
    };
  },

  // 格式化缩放级别显示
  formatZoomLevel: function(zoomLevel) {
    return Math.round(zoomLevel) + '%';
  },

  // 格式化贴件编号
  formatPatchNumber: function(index) {
    return 'P' + (index + 1);
  },

  // 计算图片样式
  getImageStyle: function(imageInfo) {
    if (!imageInfo.loaded) {
      return 'display: none;';
    }
    return 'position: absolute; left: ' + imageInfo.left + 'px; top: ' + imageInfo.top + 'px; width: ' + imageInfo.displayWidth + 'px; height: ' + imageInfo.displayHeight + 'px;';
  },

  // 计算可移动区域样式（相对于图片位置）
  getMovableAreaStyleRelativeToImage: function(movableArea, imageInfo) {
    if (!imageInfo.loaded) {
      return 'display: none;';
    }
    var absoluteLeft = imageInfo.left + movableArea.left;
    var absoluteTop = imageInfo.top + movableArea.top;
    return 'left: ' + absoluteLeft + 'px; top: ' + absoluteTop + 'px; width: ' + movableArea.width + 'px; height: ' + movableArea.height + 'px;';
  },

  // 计算不可移动区域样式（相对于图片位置）
  getNonMovableAreaStyleRelativeToImage: function(area, imageInfo) {
    if (!imageInfo.loaded) {
      return 'display: none;';
    }
    var absoluteLeft = imageInfo.left + area.left;
    var absoluteTop = imageInfo.top + area.top;
    return 'left: ' + absoluteLeft + 'px; top: ' + absoluteTop + 'px; width: ' + area.width + 'px; height: ' + area.height + 'px;';
  },

  // 计算贴件样式（相对于图片位置）
  getPatchStyleRelativeToImage: function(patch, imageInfo, isSelected) {
    if (!imageInfo.loaded) {
      return 'display: none;';
    }
    var absoluteLeft = imageInfo.left + patch.left;
    var absoluteTop = imageInfo.top + patch.top;
    
    // 根据状态确定边框颜色和宽度
    var borderColor = '';
    var borderWidth = '0rpx';
    
    if (!patch.isValid) {
      // 无效时：红色边框 (最高优先级)
      borderColor = '#c1272d';
      borderWidth = '1rpx';
    } else if (isSelected) {
      // 激活且有效时：橙色边框
      borderColor = '#ffb50f';
      borderWidth = '1rpx';
    }
    // 未激活且有效时：无边框（borderWidth = '0rpx'）
    
    var borderStyle = borderWidth === '0rpx' ? '' : 'border: ' + borderWidth + ' solid ' + borderColor + ';';
    
    return 'position: absolute; left: ' + absoluteLeft + 'px; top: ' + absoluteTop + 'px; width: ' + patch.width + 'px; height: ' + patch.height + 'px; transform: rotate(' + patch.rotation + 'deg); ' + borderStyle;
  },

  // 计算工作区变换样式
  getWorkspaceTransform: function(workspaceOffsetX, workspaceOffsetY, zoomLevel, transformOriginX, transformOriginY) {
    return 'transform: translate(' + workspaceOffsetX + 'px, ' + workspaceOffsetY + 'px) scale(' + (zoomLevel / 100) + '); transform-origin: ' + transformOriginX + 'px ' + transformOriginY + 'px;';
  },

  // 获取区域显示按钮文本
  getAreaGuideButtonText: function(showAreaGuides) {
    return showAreaGuides ? '隐藏区域' : '显示区域';
  },

  // 获取确认按钮文本
  getConfirmButtonText: function(allValid, generating) {
    if (generating) {
      return '生成中...';
    }
    return allValid ? '确认并生成双面快照' : '请调整贴件位置';
  },

  // 获取确认按钮类名
  getConfirmButtonClass: function(allValid, generating) {
    return (allValid && !generating) ? 'enabled' : 'disabled';
  }
};

module.exports = patchTools;
